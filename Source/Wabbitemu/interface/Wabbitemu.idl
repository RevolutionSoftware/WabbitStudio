import "oaidl.idl";
import "ocidl.idl";

interface IPage;

typedef enum 
{
	SYM_REAL = 0x00,
	SYM_LIST = 0x01,
	SYM_MAT = 0x02,
	SYM_EQU = 0x03,
	SYM_STRNG = 0x04,
	SYM_PROG = 0x05,
	SYM_PROTPROG = 0x06,
	SYM_PICT = 0x07,
	SYM_GDB = 0x08,
	SYM_UNKNOWN = 0x09,
	SYM_UNKNOWNEQU = 0x0A,
	SYM_NEWEQU = 0x0B,
	SYM_CPLX = 0x0C,
	SYM_CLIST = 0x0D,
	SYM_UNDEF = 0x0E,
	SYM_WINDOW = 0x0F,
	SYM_ZSTO = 0x10,
	SYM_TBLRNG = 0x11,
	SYM_LCD = 0x12,
	SYM_BACKUP = 0x13,
	SYM_APP = 0x14,
	SYM_APPVAR = 0x15,
	SYM_TEMPPROG = 0x16,
	SYM_GROUP = 0x17,
	SYM_EQUOB = 0x23,

	SYM_NONE = -1,
} SymbolType;

[
	object,
	uuid(010A714D-CADA-400f-90F9-FC34B2A20752),
	dual,
]
interface ITISymbol : IDispatch
{
	[propget, helpstring("The type of the symbol.")]
	HRESULT Type([out, retval] SymbolType *lpSymbolType);
	[propget, helpstring("Version of the symbol.")]
	HRESULT Version([out, retval] BYTE *lpVersion);
	[propget, helpstring("Page the symbol exists on.")]
	HRESULT Page([out, retval] IPage **lpPage);
	[propget, helpstring("Address of the symbol on the page.")]
	HRESULT Address([out, retval] WORD *lpAddr);
	[propget, helpstring("Name of the symbol")]
	HRESULT Name([out, retval] BSTR *lpName);

	[helpstring("Exports the symbol to the given filename")]
	HRESULT Export(BSTR lpFileName);
};

[
	object,
	uuid(59A2033F-69E7-4678-B32A-962A262FE053),
	odl,
	dual,
	oleautomation,
	nonextensible,
	pointer_default(unique)
]
interface ITISymbolCollection : IDispatch
{
	[propget]
	HRESULT Count([out, retval] LONG *Count);

	[propget, id(DISPID_VALUE)]
	HRESULT Item([in] LONG Index, [out, retval] ITISymbol **Item);

	[propput]
	HRESULT Item([in] LONG Index, [in] ITISymbol *Item);

	[propget, restricted, hidden, id(DISPID_NEWENUM)]
	HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
}

[
	object,
	uuid(36AE85E8-FE2A-41bc-85B5-105B32D8E181),
	dual,
]
interface ITIApplication : IDispatch {
	[propget, helpstring("Number of pages the application uses.")]
	HRESULT PageCount([out, retval] int *lpPageCount);
	[propget, helpstring("First page the app exists on.")]
	HRESULT Page([out, retval] IPage **lpPage);
	[propget, helpstring("Name of the symbol")]
	HRESULT Name([out, retval] BSTR *lpName);

	[helpstring("Exports the application to the given filename")]
	HRESULT Export(BSTR lpFileName);
};

[
	object,
	uuid(C475C584-E8AD-4E7F-9EAD-445BB40BAE2C),
	odl,
	dual,
	oleautomation,
	nonextensible,
	pointer_default(unique)
]
interface ITIApplicationCollection : IDispatch {
	[propget]
	HRESULT Count([out, retval] LONG *Count);

	[propget, id(DISPID_VALUE)]
	HRESULT Item([in] LONG Index, [out, retval] ITIApplication **Item);

	[propput]
	HRESULT Item([in] LONG Index, [in] ITIApplication *Item);

	[propget, restricted, hidden, id(DISPID_NEWENUM)]
	HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
}


[
	uuid(023D1C58-C323-43a7-860B-95FB9C204F91),
	dual,
]
interface ILCD : IDispatch
{
	[propget] HRESULT Display([out, retval] SAFEARRAY(BYTE) *Display);
	[propget] HRESULT Width([out, retval] WORD *Width);
	[propget] HRESULT Height([out, retval] WORD *Height);
}

[
	uuid(41C7B7BF-D390-4ba0-8075-462FD3565225),
	dual,
]
interface IZ80 : IDispatch
{
	[propget] HRESULT AF([out, retval] WORD *AF);
	[propget] HRESULT A([out, retval] BYTE *A);
	[propget] HRESULT F([out, retval] BYTE *F);
	[propput] HRESULT AF([in] WORD AF);
	[propput] HRESULT A([in] BYTE A);
	[propput] HRESULT F([in] BYTE F);

	[propget] HRESULT BC([out, retval] WORD *BC);
	[propget] HRESULT B([out, retval] BYTE *B);
	[propget] HRESULT C([out, retval] BYTE *C);
	[propput] HRESULT BC([in] WORD BC);
	[propput] HRESULT B([in] BYTE B);
	[propput] HRESULT C([in] BYTE C);

	[propget] HRESULT DE([out, retval] WORD *DE);
	[propget] HRESULT D([out, retval] BYTE *D);
	[propget] HRESULT E([out, retval] BYTE *E);
	[propput] HRESULT DE([in] WORD DE);
	[propput] HRESULT D([in] BYTE D);
	[propput] HRESULT E([in] BYTE E);

	[propget] HRESULT HL([out, retval] WORD *HL);
	[propget] HRESULT H([out, retval] BYTE *H);
	[propget] HRESULT L([out, retval] BYTE *L);
	[propput] HRESULT HL([in] WORD HL);
	[propput] HRESULT H([in] BYTE H);
	[propput] HRESULT L([in] BYTE L);
	
	[propget] HRESULT AFP([out, retval] WORD *AFP);
	[propget] HRESULT AP([out, retval] BYTE *AP);
	[propget] HRESULT FP([out, retval] BYTE *FP);
	[propput] HRESULT AFP([in] WORD AFP);
	[propput] HRESULT AP([in] BYTE AP);
	[propput] HRESULT FP([in] BYTE FP);

	[propget] HRESULT BCP([out, retval] WORD *BCP);
	[propget] HRESULT BP([out, retval] BYTE *BP);
	[propget] HRESULT CP([out, retval] BYTE *CP);
	[propput] HRESULT BCP([in] WORD BCP);
	[propput] HRESULT BP([in] BYTE BP);
	[propput] HRESULT CP([in] BYTE CP);

	[propget] HRESULT DEP([out, retval] WORD *DEP);
	[propget] HRESULT DP([out, retval] BYTE *DP);
	[propget] HRESULT EP([out, retval] BYTE *EP);
	[propput] HRESULT DEP([in] WORD DEP);
	[propput] HRESULT DP([in] BYTE DP);
	[propput] HRESULT EP([in] BYTE EP);

	[propget] HRESULT HLP([out, retval] WORD *HLP);
	[propget] HRESULT HP([out, retval] BYTE *HP);
	[propget] HRESULT LP([out, retval] BYTE *LP);
	[propput] HRESULT HLP([in] WORD HLP);
	[propput] HRESULT HP([in] BYTE HP);
	[propput] HRESULT LP([in] BYTE LP);

	[propget] HRESULT IX([out, retval] WORD *IX);
	[propget] HRESULT IXH([out, retval] BYTE *IXH);
	[propget] HRESULT IXL([out, retval] BYTE *IXL);
	[propput] HRESULT IX([in] WORD IX);
	[propput] HRESULT IXH([in] BYTE IXH);
	[propput] HRESULT IXL([in] BYTE IXL);

	[propget] HRESULT IY([out, retval] WORD *IY);
	[propget] HRESULT IYH([out, retval] BYTE *IYH);
	[propget] HRESULT IYL([out, retval] BYTE *IYL);
	[propput] HRESULT IY([in] WORD IY);
	[propput] HRESULT IYH([in] BYTE IYH);
	[propput] HRESULT IYL([in] BYTE IYL);

	[propget] HRESULT PC([out, retval] WORD *PC);
	[propput] HRESULT PC([in] WORD PC);

	[propget] HRESULT SP([out, retval] WORD *SP);
	[propput] HRESULT SP([in] WORD SP);

	[propget] HRESULT Halt([out, retval] VARIANT_BOOL *Halt);
	[propput] HRESULT Halt([in] VARIANT_BOOL Halt);
};

const DISPID DISPID_READBYTE = 3;
const DISPID DISPID_READWORD = 4;
const DISPID DISPID_READ = 5;
const DISPID DISPID_WRITEBYTE = 6;
const DISPID DISPID_WRITEWORD = 7;
const DISPID DISPID_WRITE = 8;

[
	uuid(CCFBAB27-825D-4F3B-8A73-3DB804A2F128)
]
interface IReadWrite : IDispatch
{
	[id(DISPID_READBYTE), helpstring("Read a byte")]
	HRESULT ReadByte([in] WORD Address, [out, retval] BYTE *Result);

	[id(DISPID_READWORD), helpstring("Read a word")]
	HRESULT ReadWord([in] WORD Address, [out, retval] WORD *Result);

	[id(DISPID_READ), helpstring("Read a block of memory")]
	HRESULT Read([in] WORD Address, [in] WORD Count, [out, retval] SAFEARRAY(BYTE) *Result);

	[id(DISPID_WRITEBYTE), helpstring("Write a byte")]
	HRESULT WriteByte([in] WORD Address, [in] BYTE Value);

	[id(DISPID_WRITEWORD), helpstring("Write a word")]
	HRESULT WriteWord([in] WORD Address, [in] WORD Value);

	[id(DISPID_WRITE), helpstring("Write a block of memory")]
	HRESULT Write([in] WORD Address, [in] SAFEARRAY(BYTE) Value);	
}

[
	object,
	uuid(B61370EF-8BEF-4bb9-AF88-FF7FFD0A012E),
	pointer_default(unique),
	dual,
]
interface IPage : IReadWrite
{
	[propget, helpstring("Index of this page")]
	HRESULT Index([out, retval] int *pIndex);

	[propget, helpstring("Whether or not the page is flash")]
	HRESULT IsFlash([out, retval] VARIANT_BOOL *IsFlash);

	[id(DISPID_VALUE), propget]
	HRESULT Item([in] LONG Index, [out, retval] BYTE *Item);
}

[
	uuid(9BD2CC22-5E1D-41c1-A134-F24410EF6301),
	dual,
]
interface IKeypad : IDispatch
{
	typedef enum CalcKey
	{
		KEY_UP,
		KEY_LEFT,
		KEY_RIGHT,
		KEY_DOWN,

		KEY_2ND,
		KEY_MODE,
		KEY_DEL,
		KEY_ALPHA,
		KEY_XTON,
		KEY_STAT,

		KEY_YEQU,
		KEY_WINDOW,
		KEY_ZOOM,
		KEY_TRACE,
		KEY_GRAPH,

		KEY_MATH,
		KEY_APPS,
		KEY_PRGM,
		KEY_VARS,
		KEY_CLEAR,

		KEY_INVERSE,
		KEY_SIN,
		KEY_COS,
		KEY_TAN,
		KEY_EXP,

		KEY_SQUARE,
		KEY_COMMA,
		KEY_LPAREN,
		KEY_RPAREN,
		KEY_DIV,

		KEY_LOG,
		KEY_7,
		KEY_8,
		KEY_9,
		KEY_MULT,

		KEY_LN,
		KEY_4,
		KEY_5,
		KEY_6,
		KEY_SUB,
		
		KEY_STO,
		KEY_1,
		KEY_2,
		KEY_3,
		KEY_ADD,

		KEY_ON,
		KEY_0,
		KEY_PERIOD,
		KEY_NEGATE,
		KEY_ENTER
	} CalcKey;

	HRESULT PressKey([in] enum CalcKey Key);
	HRESULT ReleaseKey([in] enum CalcKey Key);
	HRESULT PressReleaseKey([in] enum CalcKey Key);
	HRESULT PressReleaseKeys([in] SAFEARRAY(enum CalcKey) Keys);
	HRESULT IsKeyPressed([in] enum CalcKey Key, [out, retval] VARIANT_BOOL *IsPressed);
}

[
	uuid(59fc4b09-d16b-4f00-b240-7741da7dde5a),
	object,
]
interface IPio : IUnknown
{

}

interface IWabbitemu;

[
	uuid(A24DA6E6-BD47-444d-891F-BB368872C34F),
	pointer_default(unique),
	dual,
	version(1.0)
]
interface ICalcAddress : IDispatch
{
	HRESULT Initialize([in] IPage *Page, [in] WORD Address);

	[propget, helpstring("Page this address is on")]
	HRESULT Page([out, retval] IPage **Page);

	[propget, helpstring("The memory address")]
	HRESULT Address([out, retval] WORD *Address);

	[id(DISPID_READBYTE), helpstring("Read a byte")]
	HRESULT ReadByte([out, retval] BYTE *Result);

	[id(DISPID_READWORD), helpstring("Read a word")]
	HRESULT ReadWord([out, retval] WORD *Result);

	[id(DISPID_READ), helpstring("Read a block of memory")]
	HRESULT Read([in] WORD Count, [out, retval] SAFEARRAY(BYTE) *Result);

	[id(DISPID_WRITEBYTE), helpstring("Write a byte")]
	HRESULT WriteByte( [in] BYTE Value);

	[id(DISPID_WRITEWORD), helpstring("Write a word")]
	HRESULT WriteWord([in] WORD Value);

	[id(DISPID_WRITE), helpstring("Write a block of memory")]
	HRESULT Write([in] SAFEARRAY(BYTE) Value);	
}

[
	object,
	uuid(8E5D1F9E-C487-48c9-A1AD-C9ACE44C1E3A),
	pointer_default(unique),
	dual,
	version(1.0)
]
interface ILabel : IDispatch
{
	[propget, helpstring("Name of this label")]
	HRESULT Name([out, retval] BSTR *Name);
}


[
	uuid(207CC027-41EE-4582-8430-C1D4FE910143),
	pointer_default(unique),
	dual,
	version(1.0)
]
interface ILabelServer : IDispatch
{
	// Properties
	[propget, helpstring("Whether or not lookups are case sensitive")]
	HRESULT CaseSensitive([out, retval] VARIANT_BOOL *IsCaseSensitive);
	[propput, helpstring("Whether or not lookups are case sensitive")]
	HRESULT CaseSensitive([in] VARIANT_BOOL IsCaseSensitive);

	// Methods
	[helpstring("Lookup a label based on name or address")]
	HRESULT Find([in] VARIANT Criteria, [out, retval] ILabel **Label);
	[helpstring("Loads labels from a file")]
	HRESULT Load([in] BSTR FileName);
}

[
	helpstring("Code execution breakpoint that can be enabled/disabled"),
	uuid(569FD80A-BAFB-4DA8-98EB-F83AFDBAC8B3),
	dual,
	pointer_default(unique)
]
interface IBreakpoint : IDispatch
{
	[propget]
	HRESULT Address([out, retval] ICalcAddress **Address);
	
	[propget]
	HRESULT Enabled([out, retval] VARIANT_BOOL *Enabled);
	[propput]
	HRESULT Enabled([in] VARIANT_BOOL Enabled);
}


[
	helpstring("Collection for managing breakpoints"),
	version(1.0),
	uuid(1A6B7029-87C3-4922-860B-D1971958DE4A),
	dual,
	pointer_default(unique)
]
interface IBreakpointCollection : IDispatch
{
	[propget]
	HRESULT Count([out, retval] LONG *Count);

	[id(DISPID_VALUE), propget]
	HRESULT Item([in] LONG Index, [out, retval] IBreakpoint **Item);

	[id(DISPID_NEWENUM), propget]
	HRESULT _NewEnum([out, retval] IUnknown** ppEnum);

	[helpstring("Add a new breakpoint")]
	HRESULT Add([in] ICalcAddress *Address, [out, retval] IBreakpoint **Breakpoint);

	[helpstring("Remove a breakpoint")]
	HRESULT Remove([in] IBreakpoint *Breakpoint);
}

[
	object,
	uuid(E41E6D44-20C6-42FA-885B-388879187373),
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IPageCollection : IDispatch
{
	[propget]
	HRESULT Count([out, retval] LONG *Count);

	[propget, id(DISPID_VALUE)]
	HRESULT Item([in] LONG Index, [out, retval] IPage **Item);

	[propput]
	HRESULT Item([in] LONG Index, [in] IPage *Item);

	[propget, restricted, hidden, id(DISPID_NEWENUM)]
	HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
}

[
	version(1.0),
	uuid(74950913-4DC9-4F68-AD0A-E5B5A4E0294D),
	dual,
	pointer_default(unique)
]
interface IMemoryContext : IReadWrite
{
	[propget]
	HRESULT RAM([out, retval] IPageCollection **RAM);

	[propget]
	HRESULT Flash([out, retval] IPageCollection **Flash);

	[propget]
	HRESULT Bank([out, retval] IPageCollection **Bank);

	//HRESULT CreateAddress([in] WORD Address, [in, optional] VARIANT IsFlash, [in, optional] VARIANT PageIndex);
};


const int DISPID_BREAKPOINT = 1;
const int DISPID_CLOSE = 2;

[
	version(1.0),
	uuid(C349A6C5-D650-4F8B-961B-81470999F813)
]
dispinterface DWabbitemuEvents
{
properties:
methods:
	[id(DISPID_BREAKPOINT)] HRESULT Breakpoint(IWabbitemu *Calc, IBreakpoint *Breakpoint);
	[id(DISPID_CLOSE)] HRESULT Close(IWabbitemu *Calc);
};

[
	uuid(020FB9D5-7F45-449b-B9DF-66CFC2482BD0),
	object,
	version(1.0),
	oleautomation
]
interface IWabbitemu : IDispatch
{
#include "..\core\modeltypes.h"

	[propget, helpstring("Whether or not the UI is visible.")]
	HRESULT Visible([out, retval] VARIANT_BOOL *lpVisible); 
	[propput, helpstring("Whether or not the UI is visible.")]
	HRESULT Visible([in] VARIANT_BOOL fVisible); 

	[propget, helpstring("The current model of the calculator.")]
	HRESULT Model([out, retval] CalcModel *lpModel); 

	[propget, helpstring("The Z80 CPU of the calculator.")] 
	HRESULT CPU([out, retval] IZ80 **ppZ80);

	[propget, helpstring("The memory of the calculator")]
	HRESULT Memory([out, retval] IMemoryContext **Memory);

	[propget, helpstring("The LCD device of the calculator.")]
	HRESULT LCD([out, retval] ILCD **ppLCD);

	[propget, helpstring("Whether or not the calculator is running.")]
	HRESULT Running([out, retval] VARIANT_BOOL *lpfRunning);

	[propput, helpstring("The current speed of the running calculator. 100 is normal speed.")]
	HRESULT Speed([in] int speed);

	[propget, helpstring("The current speed of the running calculator. 100 is normal speed.")]
	HRESULT Speed([out, retval] int *lpSpeed);

	[helpstring("Execute a single instruction.")]
	HRESULT Step();
	[helpstring("Executes a single a single line of code.")]
	HRESULT StepOver();
	[helpstring("Resumes execution of the emulator core.")]
	HRESULT Run();
	[helpstring("Stops execution of the emulator core.")]
	HRESULT Break();

	[helpstring("Resets the calculator.")]
	HRESULT Reset();

	[helpstring("Presses the on key if the calculator LCD is off.")]
	HRESULT TurnCalcOn();

	[propget, helpstring("Collection of execution breakpoints")]
	HRESULT Breakpoints([out, retval] IBreakpointCollection **Breakpoints);

	[helpstring("Opens the file given and if recognized, sends it to the calculator.")]
	HRESULT LoadFile([in] BSTR FileName);
	[helpstring("Saves the current calculator to the file, using the format specified. 0 means no compression\
		1 means use ZLIB.")]
	HRESULT SaveFile([in] BSTR FileName, [in] BSTR Author, [in] BSTR Comment, [in] int Compress);

	[helpstring("Starts recording a GIF.")]
	HRESULT StartRecordGIF([in] BSTR FileName);
	[helpstring("Stops recording the current GIF and saves it to the filename given when started.")]
	HRESULT StopRecordGIF();

	[propget, helpstring("List of applications on the calculator.")]
	HRESULT Apps([out, retval] ITIApplicationCollection **AppList);

	[propget, helpstring("List of symbols (programs, lists, etc) on the calculator.")]
	HRESULT Symbols([out, retval] ITISymbolCollection **SymList);

	[propget, helpstring("Gets the keypad device on the calculator.")]
	HRESULT Keypad([out, retval] IKeypad **Keypad);
	
	[propget, helpstring("Gets the list of labels loaded on this calculator.")]
	HRESULT Labels([out, retval] ILabelServer **Labels);
};

[
	uuid(EDA903F6-7BB8-437f-978F-8F1A2B8B65DB),
	helpstring("Wabbitemu Type Library 1.0"),
	version(1.0),
]
library WabbitemuLib
{
	importlib("stdole32.tlb");

	interface IReadable;
	dispinterface DWabbitemuEvents;

	[
		uuid(1A03AFA2-C9C7-4d5b-9732-D78011D5009B)
	]
	coclass Wabbitemu
	{
		[default] interface IWabbitemu;
		[default, source] dispinterface DWabbitemuEvents;
	}

	[
		uuid(D46A319B-86C3-4F4C-8F7F-8189C38B62EC)
	]
	coclass CalcAddress
	{
		[default] interface ICalcAddress;
	}
};
